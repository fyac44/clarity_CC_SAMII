function [y, N, resamp] = ffGn_gpu(N, L, tdres, Hinput, noiseType)% FFGN  Fast (exact) fractional Gaussian noise and Brownian motion % generator.%% USAGE:%	[Y, N, resamp] = FFGN(N, L, tdres, Hinput, noiseType)% % INPUTS:% - N, L:       Size of the output sequence. (Gaussian points x CFs)% - tdres:      Time resolution (1/sampling rate)% - Hinput:	    "Hurst" index of the resultant noise (0 < H <= 2). %               For 0 < H <= 1, the output will be fractional Gaussian %               noise with Hurst index H. %               For 1 < H <= 2, the output will be fractional Brownian %               motion with Hurst index H-1. %               Either way, the power spectral density of the output will%				be nominally proportional to 1/f^(2H-1).% - noiseType:	0 for fixed fGn noise and 1 for variable fGn%% OUTPUTS:% - Y:      Sequences of fractional Gaussian noise with a mean of zero and %           a standard deviation of one or fractional Brownian motion %           derived from such fractional Gaussian noise. (One sequence per%           center frequency)% - N:      Number of points in the sequence per CF.% - resamp: Resampling value applied to obtain the points.%% 	References: Davies & Harte (1987); Beran (1994); Bardet et al., (2002).%%   IMPORTANT NOTE:%   This is an adaptation very specific for our implementation in Alvarez%   and Nogueira (2022). We strongly recommend to use the original code%   described in the referenced work in case you need it for another%   implementation of the Gaussian noise.%%   Copyright ï¿½ 2003-2005 by B. Scott Jackson% Check to see if running under Matlab or Octaveif exist ('OCTAVE_VERSION', 'builtin') ~= 0    pkg load signal;end%---- Check input arguments ---------- %if (numel(Hinput) ~= 1) || ~isnumeric(N) || ~isnumeric(Hinput) ...        || ~isreal(N) || ~isreal(Hinput) || ~isfinite(N) || ~isfinite(Hinput)	error('All input arguments must be finite real scalars.')endif (N <= 0)	error('Length of the return vector must be positive.')endif (tdres > 1)	error('Original sampling rate should be checked.')end if (Hinput < 0) || (Hinput > 2)	error('The Hurst parameter must be in the interval (0,2].')endif (nargin > 5)	if (numel(mu) ~= L) || ~isnumeric(mu)		error('All input arguments must be finite real scalars.')	endend	if (nargin > 6)	if (numel(size(sigma)) ~= 1) || ~isnumeric(sigma) || ~isreal(sigma) || ~isfinite(sigma)		error('All input arguments must be finite real scalars.')	end	if (sigma <= 0)		error('Standard deviation must be greater than zero.')	endend% Downsampling number of points to match with those of Scott jackson % (tau 1e-1)resamp = ceil(1e-1/tdres);N = ceil(N/resamp)+1; if (N<10)    N = 10;end% Determine whether fGn or fBn should be produced.if ( Hinput <= 1 )	H = Hinput;	fBn = 0;else	H = Hinput - 1;	fBn = 1;end% Calculate the fGn.Nfft = 2^ceil(log2(2*(N-1)));NfftHalf = round(Nfft/2);k = gpuArray([0:NfftHalf, (NfftHalf-1):-1:1]);Zmag = 0.5 .* ( (k+1).^(2.*H) - 2.*k.^(2.*H) + (abs(k-1)).^(2.*H) );clear kZmag = real(fft(Zmag));if ( any(Zmag < 0) )    error('The fast Fourier transform of the circulant covariance had negative values.');endZmag = sqrt(Zmag);if noiseType == 0 % for fixed fGn    randn('seed',37) %#ok<RAND> % fixed seed from MATLABendZ = Zmag.*(randn(L,Nfft) + 1i.*randn(L,Nfft));y = real(ifft(Z,Nfft,2)) .* sqrt(Nfft);clear Zy(:,(N+1):end) = [];clear Zmagy=y';% Convert the fGn to fBn, if necessary.if (fBn)	y = cumsum(y);end